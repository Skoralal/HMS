@page "/DishFactory"
@inject InewHHService HHService
@inject IMemberService MemberService
@inject IGoodService GoodService
@inject IDishService DishService
@inject IInviteService InviteService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject IDataService DataService
@using System.Globalization

@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>DishFactory</PageTitle>
<h3>DishFactory</h3>
<h1>@Curr</h1>
<EditForm Model="newDish" OnValidSubmit="HandleNewDish">
    <input @bind-value="newDish.Name" placeholder="Name" />
    <br />
    <input @bind-value="newDish.Category" placeholder="category" list="categories"/>
    <br />
    <datalist id="categories">
        @foreach(string cat in categories)
        {
            <option cat>@cat</option>
        }
    </datalist>
    @if (DishGoodsList.Count != 0)
    {
       //@for (int i = 0; i < DishGoodsList.Count; i++)
        //{
            //aboba(i);
            //<label>aboba @i @DishGoodsList[i].Stock</label>
            //<input @bind-value="@DishGoodsList[i].Name" list="list" @onmouseover="() => hover(i)" />
            //<InputNumber @bind-Value="DishGoodsList[i].Stock" />
            //<input @bind-value="@DishGoodsList[i].Stock" />//input is string, so without check
            //<button @onclick="() => aboba(i)">@i</button>
            //<br />
        //}
        <label>Contents</label>
        <br />
        @foreach(var randomGood in RandomizedGoods)
        {
            for(int i = 0; i < randomGood.Count;i++)
            {
                var Good = randomGood[i];
                <div hidden="@(Good.Stock < 0)">
                    <InputText @bind-Value="Good.Name" list="list">@Good.Name</InputText>
                    <InputNumber @bind-Value="Good.Stock">@Good.Stock</InputNumber>
                    <button type="button" @onclick="() => Good.Stock = -1">delete</button>
                    <button type="button" @onclick="() => AddSubstanceGood(randomGood)">add substance</button>
                    <br />
                    @if(i != randomGood.Count - 1)
                    {
                    <label>OR</label>
                    }
                    <br />
                </div>
                
            }
            <br />
            <br />
        }
        <input @bind-value="newDish.Recipe" placeholder="recipe"/>

    }
    
    <datalist id="list">
        @foreach (var ing in HHService.currentHH.GoodsDic.Values)
        {
            <option value="@ing.Name">@ing.Name</option>
        }
        
    </datalist>
    <datalist id="cats">
        @foreach(string cat in categories)
        {
            <option value="@cat">@cat</option>
        }
    </datalist>
    <button type="submit">submit</button>
</EditForm>
<button @onclick="() => AddRandomGood()">Add ing</button>

@code {
    Dish newDish = new();
    string MemberLogin;
    string HHLogin;
    int Curr = 0;
    HashSet<string> categories = new();
    public List<Good> DishGoodsList = [new Good(){Stock = 0, Name = ""}];
    public List<int> mappedDishGoods = [0];
    public List<List<Good>> RandomizedGoods = [new List<Good>{new Good()}];
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        MemberLogin = user.Identity.Name;
        HHLogin = await MemberService.GetParentHH(MemberLogin);
        categories = HHService.currentHH.DishesDic.Values.Select(e => e.Category).ToHashSet();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Only load data after the first render, to prevent multiple calls
            await HHService.LoadDataFromSession();

            // Trigger a re-render if necessary
            StateHasChanged();
        }
    }
    public void aboba(int index)
    {
        //DishGoodsList[index].Name = "aboba";
        // DishGoodsList[index].PassiveConsumption = index;
        DishGoodsList[index].Stock = -1;
    }
    public void hover(int index)
    {
        Curr = index;
    }
    public async void HandleNewDish()
    {
        for (int i = 0; i < RandomizedGoods.Count;i++)
        {
            if(RandomizedGoods[i].Any(x => x.Stock > 0))
            {
                newDish.RandomizedContents.Add(new());
            }
            else
            {
                RandomizedGoods.RemoveAt(i);
                i--;
                continue;
            }
            foreach (var Good in RandomizedGoods[i])
            {
                if (Good.Stock > 0)
                {
                    newDish.RandomizedContents[i].Add(new Good(HHService.currentHH.GoodsDic[Good.Name]).Cleansed(Good.Stock, HHService.currentHH.NormalizedGoodsDic));
                }
            }
        }
        newDish.Time = "Template";
        newDish.ID = newDish.Time+newDish.Name;
        newDish.Owner = MemberLogin;
        //await DishService.AddNewDBDish(newDish);
        HHService.currentHH.DishesDic.Add(newDish.ID, newDish);
        await HHService.UpdateHH();
        newDish = new();
        DishGoodsList = [new Good() { Stock = 0, Name = "" }];
        mappedDishGoods = [0];
        StateHasChanged();
    }
    public void AddIng()
    {
        DishGoodsList.Add(new Good() { Stock = 0, Name = "" });
        mappedDishGoods.Add(mappedDishGoods[(mappedDishGoods.Count - 1)] + 1);
    }
    public void AddRandomGood()
    {
        RandomizedGoods.Add(new List<Good> { new Good() });
    }
    public void AddSubstanceGood(List<Good> node)
    {
        node.Add(new Good());
    }
}
