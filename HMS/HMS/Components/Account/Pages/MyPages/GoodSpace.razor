@page "/GoodSpace"
@inject InewHHService HHService
@inject IMemberService MemberService
@inject IGoodService GoodService
@inject IDishService DishService
@inject IInviteService InviteService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject IDataService DataService


@attribute [Authorize]
@rendermode @(new InteractiveServerRenderMode(false))
<PageTitle>GoodSpace</PageTitle>

<h1>Aboba</h1>
@if (HHService.SharedGood.Name != "")
{
    <label>@HHService.currentHH.GoodsDic[HHService.SharedGood.Name].Name ---</label>
    <label>@HHService.currentHH.GoodsDic[HHService.SharedGood.Name].Stock</label>
}

<br />
<input @bind-value="amountToConsume" />
<button @onclick="LocalConsume">Consume</button>
<br />
<input @onchange="OnAmountToCookChanged" value="@amountToCook" />
@if (isBought)
{
    <button @onclick="LocalBuy">Buy</button>
}
else
{
    <button @onclick="LocalCook">Cook</button>
}
<br />
<label>@output</label>
<br />
@if (HHService.SharedGood.Name != "")
{
    <label>@HHService.currentHH.GoodsDic[HHService.SharedGood.Name].Category</label>
}
<div class="container">
    <div class="box">
        @foreach (var ess in aboba.Keys)
        {
            <div>
                <h2>@aboba[ess].Name</h2> - <label>@aboba[ess].Stock</label>
            </div>
        }
    </div>
    @if (!isBought)
    {
        <div class="box">
            @foreach (string line in cookComponents)
            {
                <label>@line</label>
                <br />
            }
        </div>
    }
</div>



@code {
    Dictionary<string, Good> aboba = new();
    List<Good> Essentials = new();
    double amountToConsume = 0;
    double amountToCook = 0;
    string output;
    bool isBought = false;
    List<string> cookComponents = new();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        string MemberLogin = "";
        if (user.Identity.IsAuthenticated)
        {
            MemberLogin = user.Identity.Name;
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Only load data after the first render, to prevent multiple calls
            await HHService.LoadDataFromSession();
            foreach (var ass in HHService.currentHH.GoodsDic[HHService.SharedGood.Name].Ingredients)
            {
                Essentials.Add(ass);
            }
            for (int i = 0; i < Essentials.Count; i++)
            {
                foreach (var ing in Essentials[i].Ingredients)
                {
                    Essentials.Add(ing);
                }
            }
            foreach (var good in Essentials)
            {
                if (!aboba.ContainsKey(good.Name))
                {
                    aboba.Add(good.Name, good);
                }
                else
                {
                    aboba[good.Name].Stock += good.Stock;
                }
            }
            if (HHService.currentHH.Shops.Contains(HHService.SharedGood.Ingredients[0].Name))
            {
                isBought = true;
            }
            RefreshCookComponents();
            // Trigger a re-render if necessary
            StateHasChanged();
        }
    }
    private void LocalConsume()
    {
        output = HHService.SharedGood.Consume(amountToConsume, HHService.currentHH.NormalizedGoodsDic);
        HHService.UpdateHH();
    }

    private void LocalCook()
    {
        output = HHService.Cook(amountToCook);
        RefreshCookComponents();
        // output = HHService.SharedGood.Cook(amountToCook, HHService.currentHH.NormalizedGoodsDic);
        HHService.UpdateHH();
    }
    private void RefreshCookComponents()
    {
        if (isBought)
        {
            return;
        }
        cookComponents.Clear();
        foreach(var Ing in HHService.SharedGood.Ingredients)
        {
            cookComponents.Add($"{HHService.currentHH.GoodsDic[Ing.Name].Stock}/{amountToCook * HHService.currentHH.NormalizedGoodsDic[HHService.SharedGood.Name].Ingredients.Where(x => x.Name == Ing.Name).First().Stock}   {Ing.Name}");
        }
    }
    private void LocalBuy()
    {
        output = HHService.Buy(amountToCook);
        HHService.UpdateHH();
    }
    private void OnAmountToCookChanged(ChangeEventArgs e)
    {
        // Update the bound value
        amountToCook = int.Parse(e.Value.ToString());

        // Call the RefreshCookComponents method or any other logic
        RefreshCookComponents();
    }
}
