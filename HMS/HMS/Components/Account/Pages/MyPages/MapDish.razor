@page "/MapDish"
@inject InewHHService HHService
@inject IMemberService MemberService
@inject IGoodService GoodService
@inject IDishService DishService
@inject IInviteService InviteService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@using System.ComponentModel.DataAnnotations;

@attribute [Authorize]
@rendermode InteractiveServer
<h3>MapDish</h3>


<EditForm Model="@mappedDish" OnValidSubmit="@HandleNewMappedDBDish">

    <InputDate @bind-Value="@mappedDBDishDate"></InputDate>
    <!--<input @bind-value="mapHour" @oninput="@ChangeTime" />-->
    <input type="number" @bind-value="mapHour" @bind-value:event="oninput" @onchange="@ChangeTime" />
    :
    <input type="number" @bind-value="mapMinute" @bind-value:event="oninput" @onchange="@ChangeTime" />
    @if (mapHour < 0)
    {
        mapHour = 0;
    } else if (mapHour > 23)
    {
        mapHour = 23;
    }
    @if(mapMinute < 0)
    {
        mapMinute = 0;
    }else if (mapMinute > 59)
    {
        mapMinute = 59;
    }
    <br />
    <InputText @bind-Value="mappedDish.Name">@mappedDish.Name</InputText>
    <br />
        <div>
        <label>aboba @choosenDish.Amount</label>
        <input @bind-value="@choosenDish.Name" list="list" />
        <InputNumber @bind-Value="choosenDish.Amount" />
        </div>
    <datalist id="list">
        @foreach (var dish in TemplateDishes)
        {
            <option value="@dish.Name">@dish.Name</option>
        }
    </datalist>
    <br />
        <div class="days-bar">
            @foreach (var day in DaysOfWeek)
            {
                <div class="day-container">
                    <button type="button" class="@GetButtonClass(day.Value)" @onclick="() => ToggleDay(day.Key)">
                        @day.Key
                    </button>
                </div>
            }
        </div>
    <br />
    <InputSelect TValue="string" @bind-Value="setRecurrence">
        @foreach(string option in recurrenceDic.Keys)
        {
            <option value="@option">@option</option>
        }
    </InputSelect>
    <button type="submit">submit</button>
</EditForm>
<h1>@mappedDBDishDate.ToString()</h1>
<h1> aboba @mapHour:@mapMinute</h1>
@code {
    private string UserName;
    string HHLogin;
    List<DBDish> HHDishes;
    Dish mappedDish = new Dish();
    DateTime mappedDBDishDate = DateTime.Today;
    [Range(0, 23, ErrorMessage = "Value must be between 0 and 23.")]
    int mapHour { get; set; } = 0;
    int mapMinute = 0;
    bool aboba = false;
    List<Dish> TemplateDishes = [new Dish()];
    public List<int> templateDishesIndex = [0];
    //List<Dish> IncludedDishes = [new Dish()];
    Dish choosenDish = new();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
        }
        HHLogin = await MemberService.GetParentHH(UserName);
        HHDishes = await DishService.GetAllHHDishes(HHLogin);
        var today = DateTime.Today.DayOfWeek;
        string dayString = today switch
        {
            DayOfWeek.Monday => "Mon",
            DayOfWeek.Tuesday => "Tue",
            DayOfWeek.Wednesday => "Wed",
            DayOfWeek.Thursday => "Thu",
            DayOfWeek.Friday => "Fri",
            DayOfWeek.Saturday => "Sat",
            DayOfWeek.Sunday => "Sun",
            _ => "Mon"
        };
        // DayNameToNextDate = new Dictionary<string, DateTime>
        // {
        //     { "Mon", GetNextWeekday(DayOfWeek.Monday) },
        //     { "Tue", GetNextWeekday(DayOfWeek.Tuesday) },
        //     { "Wed", GetNextWeekday(DayOfWeek.Wednesday) },
        //     { "Thu", GetNextWeekday(DayOfWeek.Thursday) },
        //     { "Fri", GetNextWeekday(DayOfWeek.Friday) },
        //     { "Sat", GetNextWeekday(DayOfWeek.Saturday) },
        //     { "Sun", GetNextWeekday(DayOfWeek.Sunday) }
        // };
        DayNameToNextDate = new Dictionary<string, DayOfWeek>
        {
            { "Mon", DayOfWeek.Monday },
            { "Tue", DayOfWeek.Tuesday },
            { "Wed", DayOfWeek.Wednesday },
            { "Thu", DayOfWeek.Thursday },
            { "Fri", DayOfWeek.Friday },
            { "Sat", DayOfWeek.Saturday },
            { "Sun", DayOfWeek.Sunday }
        };
        // Set today's day to true
        DaysOfWeek[dayString] = true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Only load data after the first render, to prevent multiple calls
            await HHService.LoadDataFromSession();
            TemplateDishes = HHService.currentHH.DishesDic.Where(x => x.Key.StartsWith("Template"))
                                .Select(x => x.Value).ToList();
            // Trigger a re-render if necessary
            StateHasChanged();
        }
    }
    public void HandleNewMappedDBDish()
    {
        mappedDish.Category = ""; // maybe use for repeat?
        mappedDish.Time = mappedDBDishDate.ToString();
        mappedDish.ID = mappedDish.Time + UserName + mappedDish.Name;

        choosenDish = HHService.currentHH.DishesDic[$"Template{choosenDish.Name}"];
        mappedDish.RandomizedContents = new(choosenDish.RandomizedContents);//
        mappedDish.RefreshGoods(HHService.currentHH, firstTime:true);
        List<Dish> InitialDishes = new();
        foreach(var isSet in DaysOfWeek)
        {
            if (isSet.Value == true)
            {
                InitialDishes.Add(new Dish(mappedDish) { Time = (mappedDBDishDate.
                    AddDays(((int)DayNameToNextDate[isSet.Key] - (int)mappedDBDishDate.DayOfWeek + 7) % 7)).ToString() });
            }
        }
        foreach(var dish in InitialDishes)
        {
            while (Convert.ToDateTime(dish.Time) < DateTime.Today.AddYears(1)){
                Dish toAdd = new(dish);
                HHService.currentHH.DishesDic.Add(toAdd.ID, toAdd);
                dish.Time = Convert.ToDateTime(dish.Time).AddDays(recurrenceDic[setRecurrence]).ToString();
            }
        }
        HHService.UpdateHH();
        mappedDish = new();
        templateDishesIndex = [0];
        StateHasChanged();
    }
    public void ChangeTime()
    {
        mappedDBDishDate = mappedDBDishDate.AddHours(mapHour - mappedDBDishDate.Hour);
        mappedDBDishDate = mappedDBDishDate.AddMinutes(mapMinute - mappedDBDishDate.Minute);
        aboba = true;
    }
    public DateTime GetNextWeekday(DayOfWeek desiredDay)
    {
        DateTime today = mappedDBDishDate;
        int daysUntilDesiredDay = ((int)desiredDay - (int)today.DayOfWeek + 7) % 7;
        return today.AddDays(daysUntilDesiredDay);
    }
    private string GetButtonClass(bool isActive)
    {
        return isActive ? "active" : string.Empty;
    }
    private Dictionary<string, bool> DaysOfWeek = new Dictionary<string, bool>
    {
        { "Mon", false },
        { "Tue", false },
        { "Wed", false },
        { "Thu", false },
        { "Fri", false },
        { "Sat", false },
        { "Sun", false }
    };
    // private Dictionary<string, DateTime> DayNameToNextDate = new Dictionary<string, DateTime>();
    private Dictionary<string, DayOfWeek> DayNameToNextDate = new Dictionary<string, DayOfWeek>();
    private Dictionary<string, double> recurrenceDic = new Dictionary<string, double>
    {
        {"one time", 0},
        {"every week", 7},
        {"every 2 weeks", 14},
        {"every 3 weeks", 21},
        {"every 4 weeks", 28},
    };
    private string setRecurrence = "one time";

    // Toggle the boolean value for a given day
    private void ToggleDay(string day)
    {
        DaysOfWeek[day] = !DaysOfWeek[day];
    }
}
