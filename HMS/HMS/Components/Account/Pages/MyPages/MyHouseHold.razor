@page "/MyHouseHold"
@inject oldIHHService old1HHService
@inject InewHHService HHService
@inject IMemberService MemberService
@inject IGoodService GoodService
@inject IDishService DishService
@inject IInviteService InviteService
@inject IDataService DataService
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
<head>

    <link rel="stylesheet" href="MyPages/MyHouseHold.razor.css" />
</head>

@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>MyHouseHold</PageTitle>
<div class="backaboba">
<h1>MyHouseHold</h1>

<AuthorizeView>
    Hello @context.User.Identity?.Name!
</AuthorizeView>
    @if (HHService.currentHH == null && HHFound)
{
    <span>Loading</span>
}
else if (HHFound)
{
        <span>@HHService.currentHH!.Login</span>
    <br />
    <label>Invite new member</label>
    <br />
    <input @bind-value="@newInvite.Reciever" placeholder="enter reciever e-mail"/>
    <button onclick="@SendInvite" class="btn-primary">Send</button>
    <br />
    @if (InviteSent)
    {
        <label>InviteSent</label>
    }
}
else if (!HHFound)
{
        <EditForm Model="HHService.currentHH" OnValidSubmit="HandleNewHH">
        <label>House Hold Login</label>
            <InputText @bind-Value="@HHService.currentHH!.Login">@HHService.currentHH!.Login</InputText>
        <br />
        <label>House Hold Password</label>
            <InputText @bind-Value="@HHService.currentHH!.Password">@HHService.currentHH!.Password</InputText>
        <br />

        <button type="submit">Submit</button>
    </EditForm>
    @foreach(var invite in myInvites)
    {
        <label>@invite.SenderHH--------</label>
        <button @onclick="() => JoinHH(invite.SenderHH)">Join @invite.SenderHH</button>
    }
}
<br />
    @if (HHService.currentHH != null)
{
        <span>@HHService.currentHH.Login</span>
    <br />
}
else
{
    <span>null</span>
}
    @if (HHService.currentHH != null && HHService.currentHH.GoodsDic != null && HHFound)
{
        <label>@HHService.currentHH.Shops.Count</label>
    <br />
        <label>My shops : @string.Join(", ", HHService.currentHH.Shops)</label>
    <br />
    <label style="color:red">Add new</label>
    <input @bind-value="newShop" />
    <button onclick="@AddNewShop">Add</button>
        <h1>@HHService.currentHH.GoodsDic.Count</h1>
    <ul>
            @foreach (var good in HHService.currentHH.GoodsDic.Keys)
        {
                <li @onclick="() => SetDataAndNavigate(HHService.currentHH.GoodsDic[good])" style="cursor:pointer">@HHService.currentHH.GoodsDic[good].Name - @HHService.currentHH.GoodsDic[good].Stock</li>
                <button class="aboba" @onclick="() => {HHService.currentHH.GoodsDic.Remove(good);HHService.currentHH.NormalizedGoodsDic.Remove(good); HHService.UpdateHH();}">Remove</button>
        }
    </ul>
}
    <button class="aboba" @onclick='() => {
        HHService.SaveToSessionStorage();
        navigationManager.NavigateTo("/NewGood");
    }'>Add new good</button>
</div>
@code {
    // List<DBGood> goods = null;
    public HH? HH;
    public string error = "";
    private string UserLogin;
    //public DBHouseHold newHouseHold = null;
    bool HHFound = true;
    string hhLogin = "aboba1";
    public HouseHold houseHold = new();
    public List<Invite> myInvites = new();
    public Invite newInvite = new();
    bool InviteSent = false;
    string newShop = "";
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        HHService.Aboba = "aboba";
        if (user.Identity.IsAuthenticated)
        {
            UserLogin = user.Identity.Name;
        }


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Only load data after the first render, to prevent multiple calls
            await HHService.LoadDataFromSession();

            // Trigger a re-render if necessary
            //StateHasChanged();
            try
            {
                //hhLogin = await MemberService.GetParentHH(UserName);
                //newHouseHold = await HHService.GetHHByID(hhLogin);
                // goods = await GoodService.GetHHGoods(hhLogin);
                if (HHService.currentHH == null || string.IsNullOrEmpty(HHService.currentHH.Password))
                {
                    if (await HHService.GetHHByUserLogin(UserLogin) == null)
                    {
                        HHFound = false;
                        myInvites = await InviteService.GetMyInvites(UserLogin);
                        HHService.currentHH = new();
                    }
                    else
                    {
                        HHService.currentHH = await HHService.GetHHByUserLogin(UserLogin);
                    }
                }

            }
            catch
            {
                HHFound = false;
            }
            if (!string.IsNullOrEmpty(HHService.currentHH.Password))
            {
                await HHService.SaveToSessionStorage();
            }
            StateHasChanged();
        }
    }
    DBHouseHold NewHouseHold = new DBHouseHold();
    DBMember InitialMember = new();
    public async void HandleNewHH()
    {
        try
        {
            // InitialMember.HouseHoldLogin = NewHouseHold.Login;
            //InitialMember.MemberLogin = UserLogin;
            // await HHService.CreateHH(NewHouseHold);
            // await MemberService.InitialMember(InitialMember);
            // newHouseHold = null;
            // Task.Delay(1000);
            // newHouseHold = await HHService.GetHHByID(UserLogin);
            await HHService.AddHH(HHService.currentHH, UserLogin);
            HHFound = true;
            navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
        }
        catch
        {
            error = "aboba";
        }

        // await 
    }
    public async Task<bool> JoinHH(string HHLogin)
    {
        DBMember dBMember = new();
        dBMember.MemberLogin = UserLogin;
        dBMember.HouseHoldLogin = HHLogin;
        await MemberService.InitialMember(dBMember);
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
        return true;
    }
    public async Task<bool> SendInvite()
    {
        //try
        //{
        newInvite.Id = HHService.currentHH.Login + newInvite.Reciever;
        newInvite.SenderHH = HHService.currentHH.Login;
        newInvite.Sender = UserLogin;
        await InviteService.SendInvite(newInvite);
        newInvite = new();
        InviteSent = true;
        return true;  
        //}
        //catch
        //{
        //InviteSent = false;
        //return false;
        //}

    }
    

    public void AddNewShop()
    {
        HHService.currentHH.Shops.Add(newShop);
        newShop = "";
        HHService.UpdateHH();
    }
    private void SetDataAndNavigate(Good good)
    {
        HHService.SharedGood = good;
        HHService.UpdateHH();
        navigationManager.NavigateTo("/GoodSpace");
    }
    
}
