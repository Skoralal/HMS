@page "/MyHouseHold"
@inject oldIHHService old1HHService
@inject InewHHService HHService
@inject IMemberService MemberService
@inject IGoodService GoodService
@inject IDishService DishService
@inject IInviteService InviteService
@inject DataService DataService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager


@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>MyHouseHold</PageTitle>

<h1>MyHouseHold</h1>

<AuthorizeView>
    Hello @context.User.Identity?.Name!
</AuthorizeView>
@if (DataService.currentHH == null && HHFound)
{
    <span>Loading</span>
}
else if (HHFound)
{
    <span>@DataService.currentHH!.Login</span>
    <br />
    <label>Invite new member</label>
    <br />
    <input @bind-value="@newInvite.Reciever" placeholder="enter reciever e-mail"/>
    <button onclick="@SendInvite" class="btn-primary">Send</button>
    <br />
    @if (InviteSent)
    {
        <label>InviteSent</label>
    }
}
else if (!HHFound)
{
    <EditForm Model="DataService.currentHH" OnValidSubmit="HandleNewHH">
        <label>House Hold Login</label>
        <InputText @bind-Value="@DataService.currentHH!.Login">@DataService.currentHH!.Login</InputText>
        <br />
        <label>House Hold Password</label>
        <InputText @bind-Value="@DataService.currentHH!.Password">@DataService.currentHH!.Password</InputText>
        <br />

        <button type="submit">Submit</button>
    </EditForm>
    @foreach(var invite in myInvites)
    {
        <label>@invite.SenderHH--------</label>
        <button @onclick="() => JoinHH(invite.SenderHH)">Join @invite.SenderHH</button>
    }
}
<br />
@if (DataService.currentHH != null)
{
    <span>@DataService.currentHH.Login</span>
    <br />
}
else
{
    <span>null</span>
}
@if (DataService.currentHH != null && DataService.currentHH.AllGoods != null && HHFound)
{
    <label>@DataService.currentHH.Shops.Count</label>
    <br />
    <label>My shops : @string.Join(", ", DataService.currentHH.Shops)</label>
    <br />
    <label>Add new</label>
    <input @bind-value="newShop" />
    <button onclick="@AddNewShop">Add</button>
    <h1>@DataService.currentHH.AllGoods.Count</h1>
    <ul>
        @foreach (var good in DataService.currentHH.AllGoods)
        {
            <li>@good.Name - @good.Stock</li>
            <button @onclick="() => DataService.currentHH.AllGoods.Remove(good)"></button>
        }
    </ul>
}
<button class="btn-primary" @onclick='() => navigationManager.NavigateTo("/NewGood")'>Add new good</button>

@code {
    // List<DBGood> goods = null;
    public HH? HH;
    public string error = "";
    private string UserLogin;
    //public DBHouseHold newHouseHold = null;
    bool HHFound = true;
    string hhLogin = "aboba1";
    public HouseHold houseHold = new();
    public List<Invite> myInvites = new();
    public Invite newInvite = new();
    bool InviteSent = false;
    string newShop = "";
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserLogin = user.Identity.Name;
        }
        try
        {
            //hhLogin = await MemberService.GetParentHH(UserName);
            //newHouseHold = await HHService.GetHHByID(hhLogin);
            // goods = await GoodService.GetHHGoods(hhLogin);
            if (await HHService.GetHHByUserLogin(UserLogin) == null)
            {
                HHFound = false;
                myInvites = await InviteService.GetMyInvites(UserLogin);
                DataService.currentHH = new();
            }
            else
            {
                DataService.currentHH = await HHService.GetHHByUserLogin(UserLogin);
            }
        }
        catch
        {
            HHFound = false;
        }

    }
    DBHouseHold NewHouseHold = new DBHouseHold();
    DBMember InitialMember = new();
    public async void HandleNewHH()
    {
        try
        {
            // InitialMember.HouseHoldLogin = NewHouseHold.Login;
            //InitialMember.MemberLogin = UserLogin;
            // await HHService.CreateHH(NewHouseHold);
            // await MemberService.InitialMember(InitialMember);
            // newHouseHold = null;
            // Task.Delay(1000);
            // newHouseHold = await HHService.GetHHByID(UserLogin);
            await HHService.AddHH(DataService.currentHH, UserLogin);
            HHFound = true;
            navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
        }
        catch
        {
            error = "aboba";
        }

        // await 
    }
    public async Task<bool> JoinHH(string HHLogin)
    {
        DBMember dBMember = new();
        dBMember.MemberLogin = UserLogin;
        dBMember.HouseHoldLogin = HHLogin;
        await MemberService.InitialMember(dBMember);
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
        return true;
    }
    public async Task<bool> SendInvite()
    {
        try
        {
            newInvite.Id = DataService.currentHH.Login + newInvite.Reciever;
            newInvite.SenderHH = DataService.currentHH.Login;
            newInvite.Sender = UserLogin;
            await InviteService.SendInvite(newInvite);
            newInvite = new();
            InviteSent = true;
            return true;  
        }
        catch
        {
            InviteSent = false;
            return false;
        }

    }
    public async void assembleHouseHoldOld()
    {
        houseHold.Login = NewHouseHold.Login;
        var goods = await GoodService.GetHHGoods(hhLogin);
        foreach (var good in goods)
        {
            Good converted = new();
            converted.Name = good.Name;
            if (good.Ingredients != null && !good.Ingredients.StartsWith("shop"))
            {
                converted.Ingredients = new();
                foreach (var couple in good.Ingredients.Split(';'))//Ing could END with "," - see GoodService
                {
                    var couple2 = couple.Split(':');
                    //converted.Ingredients.Add(new Good(couple2[0], Convert.ToDouble(couple2[1])));
                }
            }
            else if (good.Ingredients.StartsWith("shop"))
            {
                converted.Ingredients = new();
                foreach(var shop in good.Ingredients[6..].Split(";"))
                {
                    converted.Ingredients.Add(new Good() { Name = shop});
                }
            }
            converted.Stock = good.Stock;
            //converted.PassiveConsumption = good.PassiveConsumptionRate;
            //houseHold.AllGoods.Add(converted);
        }
        var dishes = await DishService.GetAllHHDishes(hhLogin);
        foreach (var dish in dishes)
        {
            Dish converted = new();
            converted.Cooked = dish.Cooked;
            converted.Consumed = dish.Consumed;
            converted.Owner = dish.MemberOwner;
            converted.Amount = dish.Amount;
            converted.Time = dish.Time;
            converted.Recipe = dish.Recipe;
            converted.Category = dish.Category;
            foreach (var couple in dish.Good.Split(';'))
            {
                var couple2 = couple.Split(':');
                //converted.Contents.Add(new Good(couple2[0], Convert.ToDouble(couple2[1])));
            }
            //houseHold.AllDishes.Add(converted);
        }
        //houseHold.Shops = await Services.oldHHService.GetHHShops(hhLogin);

    }

    public void AddNewShop()
    {
        DataService.currentHH.Shops.Add(newShop);
        newShop = "";
        HHService.UpdateHH();
    }
}
