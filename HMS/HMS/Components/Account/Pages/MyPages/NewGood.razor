@page "/NewGood"
@using System.Text.Json
@inject IGoodService GoodService
@inject IMemberService MemberService
@inject oldIHHService old1HHService
@inject InewHHService HHService
@inject IDataService DS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject ProtectedSessionStorage sessionStorage
@attribute [Authorize]
@rendermode InteractiveServer
<h1>@HHService.Aboba</h1>
<h3>NewGood</h3>
<h1>@shops.Count</h1>
<h1>@newGood.Recipe</h1>
<h1>@HHService.currentHH.GoodsDic.Count</h1>
<EditForm Model="newGood" OnValidSubmit="HandleNewGood">
    <label>Name</label>
    <InputText @bind-Value="@newGood.Name">@newGood.Name</InputText>
    <br />
    @if (GoodIngs != null)
    {
        <label>Is bought</label>
        <InputCheckbox @bind-Value="isBought">Is bought</InputCheckbox>
        @foreach (int index in mappedGoodIngs)
        {
            <div hidden="@(GoodIngs[index].Stock <= 0)" style="color: red">
                <label>@(isBought ? (shops.Contains(GoodIngs[index].Name) || GoodIngs[index].Name == "" ? "" : "error") : (HHService.currentHH.GoodsDic.Keys.Contains(GoodIngs[index].Name) || GoodIngs[index].Name == "" ? "" : "error"))</label>
                <input @bind-value="@GoodIngs[index].Name" list="@(isBought ? "shops" : "list")" />
                <InputNumber @bind-Value="GoodIngs[index].Stock" />
                <button type="button" @onclick="() => GoodIngs[index].Stock = -1">delete</button>
                <br />
            </div>
        }
    }
    <label>Ingredients</label>
    <br />
    
    <br />
    <datalist id="list">
        @foreach (var ing in HHService.currentHH.GoodsDic.Keys)
        {
            <option value="@ing">@ing</option>
        }
    </datalist>
    <datalist id="shops">
        @foreach (var shop in HHService.currentHH.Shops)
        {
            <option value="@shop">@shop</option>
        }
    </datalist>
    <button type="button" class="btn-primary" onclick="@AddIng">Add ingredient</button>
    <br />
    <label>Recipe</label>
    <br />
    <textarea @bind="@newGood.Recipe" placeholder="Recipe" style="height: 360px; width: 640px">@newGood.Recipe</textarea>
    <br />
    <label>Stock</label>
    <br />
    <InputNumber @bind-Value="@newGood.Stock">@newGood.Stock</InputNumber>
    <br />
    <label>Passive consumption</label>
    <br />
    <InputNumber @bind-Value="@newGood.PassiveConsumption">@newGood.PassiveConsumption</InputNumber>
    <br />
    <label>Icon</label>
    <br />
    <InputText @bind-Value="@newGood.Icon">@newGood.Icon</InputText>
    <br />
    



    <button type="submit">Submit</button>
</EditForm>
<h1>@Debuh</h1>
@foreach(var aboba in GoodIngs)
{
    <h3>@aboba.Name</h3>
}

@code {
    double Debuh = 1;
    private string UserName;
    public Good newGood = new();
    public Good Ingredient = new();
    public string ingName;
    public double ingStock;
    public List<Good> allIngs = new();
    string HHLogin;
    bool isBought = false;
    List<string> shops = new();
    List<Good> GoodIngs = [new Good(){Stock = 1}];
    public List<int> mappedGoodIngs = [0];
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
        }
        
        newGood.Stock = 0;
        newGood.PassiveConsumption = 0;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Only load data after the first render, to prevent multiple calls
            await HHService.LoadDataFromSession();
            shops = HHService.currentHH.Shops;
            HHLogin = HHService.currentHH.Login;
            allIngs = HHService.currentHH.GoodsDic.Values.Select(e => new Good(e)).ToList();
            // Trigger a re-render if necessary
            StateHasChanged();
        }
    }
    public async void HandleNewGood()
    {
        newGood.Ingredients = new();
        foreach (var ing in GoodIngs)
        {
            ing.Parent = newGood;
            if ((ing.Stock > 0) || (isBought && ing.Stock >=0))//one ing can be bought while another is not in the same good
            {
                if (isBought)
                {
                    newGood.Ingredients.Add(ing);
                }
                else
                {
                    if(newGood.Stock > 0)
                    {
                        newGood.Ingredients.Add(new Good(HHService.currentHH.NormalizedGoodsDic[ing.Name], newGood).Cleansed(ing.Stock * newGood.Stock, HHService.currentHH.NormalizedGoodsDic));
                    }
                    else
                    {
                        newGood.Ingredients.Add(new Good(HHService.currentHH.NormalizedGoodsDic[ing.Name], newGood).Cleansed(ing.Stock * 1, HHService.currentHH.NormalizedGoodsDic));
                    }
                }
            }
        }
        if (isBought)
        {
            foreach (var shop in newGood.Ingredients)
            {
                if (!shops.Contains(shop.Name))
                {
                    return;
                }
            }
            //await GoodService.AddHMSBoughtGood(newGood, HHLogin);
        }
        else
        {
            foreach (var ing in newGood.Ingredients)
            {
                if (!allIngs.Select(e=>e.Name).Contains(ing.Name))
                {
                    return;
                }
            }
            //await GoodService.AddHMSGood(newGood, HHLogin);
        }
        //newGood.CascadeUpdateStock();
        if(newGood.Stock == 0)
        {
            var mask = new Good(newGood);
            mask.Stock = 1;
            HHService.currentHH.AddNormalizedGood(mask.Cleansed(1, HHService.currentHH.NormalizedGoodsDic));
            newGood.Stock = 0;
            newGood.CascadeUpdateStock();
            HHService.currentHH.AddGood(new(newGood));
        }
        else
        {
            HHService.currentHH.AddGood(new(newGood));
            HHService.currentHH.AddNormalizedGood(newGood.Cleansed(1, HHService.currentHH.NormalizedGoodsDic));
        }

        await HHService.UpdateHH();//HERE
                                   //await HHService.SaveToSessionStorage();
        newGood = new();
        newGood.Name = "";
        newGood.Stock = 0;
        newGood.PassiveConsumption = 0;
        allIngs.Clear();
        GoodIngs = [new Good() { Stock = 1 }];
        mappedGoodIngs = [0];
        newGood.Ingredients.Clear();
        allIngs = HHService.currentHH.GoodsDic.Values.Select(e => new Good(e)).ToList();
        StateHasChanged();
        //navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);

    }
    public void AddNewIngredient()
    {
        if(newGood.Ingredients == null)
        {
            newGood.Ingredients = new();
        }
        Ingredient.Name = ingName;
        Ingredient.Stock = ingStock;
        newGood.Ingredients.Add(Ingredient);
        Ingredient = new();
        ingName = null;
        ingStock = 0;
        // GoodIngs.Add(new Good() { Stock = 0, Name = "" });
        // mappedGoodIngs.Add(mappedGoodIngs[(mappedGoodIngs.Count - 1)] + 1);
    }
    public void AddIng()
    {
        GoodIngs.Add(new Good() { Stock = 1});
        mappedGoodIngs.Add(mappedGoodIngs[(mappedGoodIngs.Count - 1)] + 1);
    }
    public void aboba(int index)
    {
        GoodIngs[index].Stock = -1;
    }
}
